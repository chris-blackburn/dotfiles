execute pathogen#infect()
set rtp+=~/.fzf

"===============================================================================
"                               General Settings
"===============================================================================

set encoding=utf-8

set noshowmode
set sessionoptions-=options
set noerrorbells visualbell
set ignorecase
set hlsearch incsearch
set showcmd
set wildmenu
set nowrap
set autoindent smartindent expandtab tabstop=4 softtabstop=4 shiftwidth=4
set nolazyredraw
set splitright
set nojoinspaces

" Vim can recognize files and can load plugins
filetype plugin indent on

" pretty much always want Syntax highlighting
syntax on

let g:netrw_banner=0
let g:netrw_altv=1

" TODO: update my fork of gutentags to better support cscope
let g:gutentags_modules = ["ctags"]
let g:gutentags_define_advanced_commands = 1
let g:gutentags_trace = 0
let g:gutentags_generate_on_new = 0
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_auto_add_cscope = 0
let g:gutentags_cscope_build_inverted_index = 0

let g:fzf_layout = { 'down': '10' }

" Set the swap and backup dir to something not annoying
set directory=~/.vim/.swp//,/tmp//
set backupdir=~/.vim/.backup//,/tmp//

" I don't want mouse
set mouse=

" Might be moving to nvim since clipboard support just kinda works...
if !has('nvim')
    set ttymouse=
    set ttyfast
endif

" Template files
autocmd BufNewFile *.c,*.cpp 0r ~/.vim/templates/template.c
autocmd BufNewFile *.h,*.hpp 0r ~/.vim/templates/template.h
autocmd BufNewFile *.py 0r ~/.vim/templates/template.py
autocmd BufNewFile *.sh 0r ~/.vim/templates/template.sh
autocmd BufNewFile *.rs 0r ~/.vim/templates/template.rs
autocmd BufNewFile Makefile 0r ~/.vim/templates/Makefile

" Invisible characters
" use "set list" to turn on and "set nolist" to turn off
set listchars=tab:»\ ,trail:-
set list

" Visuals
set laststatus=2
if !has('gui_running')
  set t_Co=256
endif

set background=dark
colorscheme elflord
hi Comment ctermfg=168

" Highlight the current line and column limits:
hi CursorLine term=bold cterm=bold ctermbg=236
set cursorline

hi ColorColumn ctermbg=240
set tw=79
set cc=+1

" Configure lightline
let g:lightline = {
  \ 'colorscheme': 'seoul256',
  \ 'component': {
  \   'readonly': '%{&readonly?"":""}'
  \ },
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ }

let g:promptline_theme = "lightline"
let g:promptline_preset = {
  \'a' : [ promptline#slices#host() ],
  \'b' : [ promptline#slices#user() ],
  \'c' : [ promptline#slices#cwd({ 'dir_limit': 3 }) ],
  \'x' : [ promptline#slices#python_virtualenv() ],
  \'y' : [ promptline#slices#vcs_branch() ],
  \'warn' : [ promptline#slices#last_exit_code() ]}

"===============================================================================
"                                   Mappings
"===============================================================================

" Space for leader instead of default '\'
nnoremap <Space> <Nop>
let mapleader = " "

nnoremap <F7> :setlocal spell!<CR>

" send deleted and changed text to black hole register
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d
vnoremap D "_D

nnoremap c "_c
nnoremap C "_C
vnoremap c "_c
vnoremap C "_C

" Don't put what I just pasted over into the copy buffer
xnoremap p "_dP

nnoremap Y yy

nnoremap - <Nop>
nnoremap + <Nop>

" Buffer navigation
nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>j :wincmd j<CR>
nnoremap <silent> <leader>k :wincmd k<CR>
nnoremap <silent> <leader>l :wincmd l<CR>

nnoremap <silent> <leader>H :wincmd H<CR>
nnoremap <silent> <leader>J :wincmd J<CR>
nnoremap <silent> <leader>K :wincmd K<CR>
nnoremap <silent> <leader>L :wincmd L<CR>

nnoremap <silent> <leader>v :vnew<CR>
nnoremap <silent> <leader>- :new<CR>
nnoremap <silent> <leader>t :tabnew<CR>
nnoremap <silent> <leader>q :wincmd q<CR>
nnoremap <silent> <leader>pv :Ex<CR>

nnoremap <silent> <leader>r <C-W>r
nnoremap <silent> <leader>R <C-W>R

nnoremap <silent> <leader>> 10<C-W>>
nnoremap <silent> <leader>< 10<C-W><

nnoremap <silent> <leader>= :wincmd =<CR>

nnoremap <silent> <leader>6 <C-^>

nnoremap <leader>b :echo gitme#smallblame()<CR>
nnoremap <silent> <leader>B :Git blame<CR>

" quickfix navigation
nnoremap <C-j> :cn<CR>
nnoremap <C-k> :cp<CR>

" Leave paste mode after leaving insert mode
au InsertLeave /* :set nopaste

" Mimics tmux's zoom-pane functionality where we can toggle zoom on a single
" pane without closing other panes. works per vim tab.
function! ZoomPane()
    if 1 == winnr('$')
        return
    endif

    let restorecmd = winrestcmd()

    wincmd |
    wincmd _

    " If the restore command didn't change after focusing on this pane, then we
    " were already zoomed and have to restore the original alyout. Otherwise,
    " store the zoom restore command for later
    if restorecmd ==# winrestcmd()
        exe t:restore
        return
    else
        let t:restore = restorecmd
    endif
endfunction
nnoremap <expr> <leader>o ZoomPane()

" Took this from racer-rust/vim-racer to wrap some cscope commands that don't
" add to the tag stack. You can use it to wrap pretty much any command with tag
" stacking
if &tagstack && exists('*gettagstack') && exists('*settagstack')
    function! TagPre()
        let from = [bufnr('%'), line('.'), col('.'), 0]
        let tagname = expand('<cword>')
        let stack = gettagstack()
        if stack.curidx > 1
            let stack.items = stack.items[0:stack.curidx-2]
        else
            let stack.items = []
        endif
        let stack.items += [{'from': from, 'tagname': tagname}]
        let stack.curidx = len(stack.items)
        call settagstack(win_getid(), stack)
    endfunction

    function! TagPost()
        let curidx = gettagstack().curidx + 1
        call settagstack(win_getid(), {'curidx': curidx})
    endfunction
else
    function! TagPre()
    endfunction
    function! TagPost()
    endfunction
endif

if has('cscope')
    set cscopeverbose
    set cscoperelative
    set csprg=cscope\ -C

    if has('quickfix')
        set cscopequickfix=s-,c-,d-,i-,t-,e-,a-
    endif

    cnoreabbrev csa cs add
    cnoreabbrev csf cs find
    cnoreabbrev csk cs kill
    cnoreabbrev csr cs reset
    cnoreabbrev css cs show
    cnoreabbrev csh cs help

    function! WithTag(option)
      let l:query=expand("<cword>")
      call TagPre()
      execute "cs find " . a:option . " " l:query
      call TagPost()
    endfunction

    nnoremap <silent> <leader>s :call WithTag("s")<CR>
    nnoremap <silent> <leader>c :call WithTag("c")<CR>
    nnoremap <silent> <leader>a :cs find a <C-R>=expand("<cword>")<CR><CR>
    nnoremap <silent> <leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <silent> <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>

    " Autoload cscope file
    function! LoadCscope()
        " else add the database pointed to by environment variable
        if $CSCOPE_DB != ""
            cs add $CSCOPE_DB
            return
        endif

        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose " suppress 'duplicate connection' error
            exe "cs add " . db . " " . path
            set cscopeverbose
        endif
    endfunction
    au BufEnter /* call LoadCscope()
endif

function! CtrlP()
    let root = gitme#root()
    if !empty(root)
        let s:opts = {
            \ 'source': gitme#files(),
            \ 'dir': root,
            \ 'options': '-m --prompt "'.gitme#branch().'> "'
            \}
        call fzf#run(fzf#wrap(s:opts))
    else
        execute "FZF"
    endif
endfunction
nnoremap <silent> <C-p> :call CtrlP()<CR>

" Wrapper for my tmux project opener script
function! TmuxSwitchProject()
    let s:opts = {
        \ 'source': systemlist("tmux-oproj -l"),
        \ 'options': '--prompt "tmux-oproj> "',
        \ 'sink': 'silent !tmux-oproj'
        \}
    call fzf#run(fzf#wrap(s:opts))
endfunction
nnoremap <silent> <C-f> :call TmuxSwitchProject()<CR>

" For project-specific vimrc
set exrc
set secure
